軟體測試包含單元測試、整合測試和驗收測試。傳統手動測試缺乏效率且難以重複執行。為確保軟體品質和功能，可靠的測試流程至關重要，讓使用者專注於核心工作。高效且可重複的測試流程仰賴測試框架，自動化過去手動執行的測試，並比對實際結果與預期結果。

單元測試針對程式最小邏輯單元（函式或方法）驗證其正確性。這並非新概念，早在1987年即被納入美國國家標準。單元測試也稱為模組測試，檢驗軟體設計最小單位的正確性。在程序式程式設計中，單元指單個程式、函式或過程；物件導向程式設計中，單元則指方法，包含基礎類別、抽象類別或衍生類別的方法。程式設計師通常每次修改程式碼都會執行單元測試，確保程式符合規格並無錯誤。執行單元測試的頻率取決於專案管理政策。

整合測試檢驗工作單元與其真實依賴項（如時間、網路、資料庫等）的互動，確保模組間互動正確無誤，避免模組調整造成錯誤。整合測試介於單元測試和端對端測試之間，通常由開發團隊負責特定模組的成員或專職測試人員執行。即使模組通過單元測試且獨立運作正常，與其他模組互動時仍可能出現錯誤，整合測試即負責處理此類問題。整合測試通常由測試小組執行，針對不同物件間的關聯性設計測試案例和預期結果，驗證功能在不同設定下能正常運作並輸出預期值或行為。

驗收測試在軟體開發接近完成階段進行，此時大部分問題應已修復。驗收測試由使用者和技術支援小組共同執行，模擬實際客戶使用情況，著重於使用者需求和操作流程是否人性化。開發者執行的驗收測試與客戶在接受產品前執行的驗收測試有所區別，後者稱為使用者驗收測試、終端客戶測試、實機（驗收）測試或現場（驗收）測試。
