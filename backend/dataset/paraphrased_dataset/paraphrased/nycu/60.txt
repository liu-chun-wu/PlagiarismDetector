後端服務處理資料傳遞、轉換、中介整合及資料庫連線等複雜商業邏輯。本研究比較主流商用後端程式語言，例如C#和Java，並說明PHP、Python、Node.js等非物件導向Script語言。非物件導向語言雖易學易用，但架構嚴謹度和程式可塑性不足，較適用於實驗或單一功能開發，而不適合整合或大型系統，可能造成後續維護升級困難。比較C#和Java如表所示：

| 程式語言 | C#        | Java      |
| --------- | --------- | --------- |
| 學習難易度 | 一般容易   | 稍微困難   |
| 函式庫升級 | 容易       | 困難       |
| 社群支持   | 眾多       | 眾多       |
| 語言更新   | 快         | 慢         |
| 開發速度   | 快         | 慢         |
| 跨平台     | .Net Core已提供 | 優         |
| 整合性     | 高         | 中         |
| Web 框架   | .net Core MVC | Spring MVC |
| Docker 支持 | 內建支援   | 需自行製作 |
| 功能演進   | Lambda、LINQ、Extension | Lambda      |


研究顯示，在微軟和社群支持下，C#尤其在資料處理方面領先Java，因此本研究基於開發效率和對其他產品的支持度，選擇C#作為開發語言，並搭配ASP.NET Core MVC API作為後端開發框架。
