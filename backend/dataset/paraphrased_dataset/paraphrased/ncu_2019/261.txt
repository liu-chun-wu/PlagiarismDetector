Lieberman et al. (2006) 將終端使用者運算 (EUC) 定義為允許非專業系統開發人員的使用者建立、修改或擴展系統的方法、技術和工具。EUC 也被稱為 EUD（終端使用者開發）、EUP（終端使用者程式設計）、EUSE（終端使用者軟體工程）、UDA（使用者開發的應用程式）、OEUC（組織終端使用者運算）和 EUAD（終端使用者應用程式開發）。Wikipedia (2019a) 指出試算表是最常用的 EUC 工具，非 IT 人員可以用其建立複雜的數據模型，且試算表技能對員工非常有益。

Croll (2007) 的研究強調試算表在倫敦金融區的重要性，認為公司和市場的運作離不開試算表。Panko & Port (2013) 指出試算表是一種廣泛使用的 IDE，不僅用於傳統的決策支援，還用於操作系統、追踪系統和其他大型重要系統。他們也提到，儘管人們普遍認為試算表用於開發小型、簡單的模型，但它也可以用於開發龐大複雜的應用系統，尤其在 PC 處理能力和試算表限制不再是主要問題的今天。

Rosene (2012) 比較了 EUC 和 IT 系統開發的差異，包括目標（個人 vs. 組織）、提升系統品質的時間（EUC 經常忽略）、需求收集（EUC 通常省略）、設計和規範（EUC 可能缺乏技術知識）、測試與驗證（EUC 不重視）以及消除錯誤（EUC 可能缺乏專業知識）。

Croll (2007) 的研究也指出，在金融市場等關鍵領域，試算表的使用缺乏控制，錯誤的風險不明確，甚至被高層管理者否認或隱瞞。Panko & Port (2013) 提到試算表錯誤研究表明，幾乎所有試算表都存在錯誤，而這些由 IT 部門以外人員開發的應用程式規模和影響很大，但對企業和 IT 部門來說卻難以管理，因為能見度低。

Karlsson & Hedström (2013) 指出，關於 EUC 與系統開發結合使用的研究很少，因此難以評估 EUC 作為需求工程技術的有效性，但 EUC 應用系統的質量已受到廣泛討論。Siakas et al. (2017) 認為，增加 IT 專家和終端使用者之間的可控協作至關重要，透過開放、信任和正式的溝通渠道分享知識和經驗，可以解決 EUC 的利益和風險，實現共同創造價值。
