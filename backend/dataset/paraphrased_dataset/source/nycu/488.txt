對於多屬性分類器的成本函數，不能用與單一屬性分類器一樣的方式來計算 多屬性分類器的成本函數，我們會在所有衣服屬性分支的Full Connected Layer 分 別計算每個屬性分支的成本函數後，各自依其比重加總起來後作為整個多屬性分 類器的成本函數，而每個衣服屬性的Full Connected Layer 分支之成本函數計算 方式如下： 其中𝐺𝑘為每類衣服屬性的成本，K為衣服屬性的類別總數，𝜆𝑘為每個衣服屬 性的成本比重，在這邊將𝜆𝑘設定為 𝐾。而𝐺𝑘的定義如下： 其{𝑥𝑛 𝑘, 𝑦𝑛 𝑘}表示一個訓練資料集，而𝑦𝑛 𝑘是第n個樣本𝑥𝑛 𝑘的第k個衣服屬性，N代 表訓練資料集的資料總數，而𝑀𝑘表示了第k個衣服屬性的類別個數，1{∙}為一個 指示函數。而對於本論文所使用的資料，由表 3 - 1、表 3 - 2、表 3 - 3 會發現 資料極度不平衡，為了避免資料不平衡的情形，會導致訓練的結果傾向於資料數 量較多的類別，因此將上述的𝐺𝑘算式改為： 其中𝛽𝑚 𝑘的算式如下： F = ∑𝜆𝑘𝐺𝑘 𝐾 k=1 (式 3 - 1) 𝐺k = −1 𝑁∑∑1{𝑦𝑛 𝑘= 𝑚} 𝑀𝑘 𝑚=1 ∙log 𝑒(𝑤𝑚 𝑘)𝑇∙𝑥𝑛 𝑘 ∑ 𝑒(𝑤𝑚 𝑘) 𝑇∙𝑥𝑛 𝑘 𝑘 𝑚=1 𝑁 𝑛=1 (式 3 - 2) 𝐺𝑘= −1 𝑁∑∑1{𝑦𝑛 𝑘= 𝑚} 𝑀 𝑚=1 ∙𝛽𝑚 𝑘∙log 𝑒(𝑤𝑚 𝑘)𝑇∙𝑥𝑛 𝑘 ∑ 𝑒(𝑤𝑚 𝑘) 𝑇∙𝑥𝑛 𝑘 𝑘 𝑚=1 𝑁 𝑛=1 (式 3 - 3) 其中𝑁𝑚 𝑘為第k個衣服屬性的第m類之數量，而且它會滿足∑ 𝑁𝑚 𝑘 𝑀𝑘 𝑚=1 = 𝑁𝑘這 項條件式。 這邊會設定一個額外變數𝑁∗，此變數可以控制𝑁𝑚 𝑘的最小數值，當𝑁𝑚 𝑘← max(𝑁∗, 𝑁𝑚 𝑘 )。此𝑁∗的值越接近 𝐵𝑎𝑡𝑐ℎ 𝑆𝑖𝑧𝑒 𝑀𝑘 時，各類別的𝛽𝑚 𝑘會越接近，對Loss 值 的影響力就越小；若𝑁𝑚 𝑘設定後很小，則𝛽𝑚 𝑘對Loss 的影響力就越大。 將此算法作為本論文的成本函數，希望能夠降低資料不平衡帶來的影響，避 免多屬性分類器在預測時，會把太多資料預測到數量較多的類別，並且利用此算 法計算多屬性分類器之成本函數，此成本函數將會影響Back Propagation 時所要 調整的權重。
