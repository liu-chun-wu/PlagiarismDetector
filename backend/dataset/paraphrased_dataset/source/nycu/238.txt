軟體測試可分為單元測試（Unit Testing）、整合測試（Integration Testing）和驗收測試（Acceptance Testing），過去的測試方法是手動 的，不能有效的重複利用，如果使用者想要運行同樣的測試，則需要 做更多的重複過程。在軟體工程中，需要以可靠的方式測試我們的產 - 8 - 品，以確定結果與我們的期望相同。通過精心設計的測試過程，使用 者可以更專注於他們的核心工作，所以軟件質量和功能便能有效提升。 倘若進行測試流程需較為高效並且是可重複的，便需要構建一個測試 框架來包裝細節測試過程，包括過去人工手動測試完成的工作，經由 調查測試自動化技術，構建一個可以控制執行的系統測試並將實際結 果與預測結果進行比較[11]。 單元測試（Unit Testing）顧名思義，就是以程式中最小的邏輯單 元為對象，撰寫測試程式，來驗證邏輯正確與否。一般來說，程式中 最小的邏輯單元就是函式（function），或是方法（method）。它不是 新觀念，早在1987 年，IEEE 就把單元測試納入美國國家標準[15]。 在電腦編程中，單元測試又稱為模組測試，是針對程式模組，也就是 軟體設計中的最小單位，來進行正確性檢驗的測試工作。程式單元是 應用的最小可測試部件。在程序編程中，一個單元就是單個程式、函 式、過程等；對於物件導向程式設計，最小單元就是方法，包括基礎 類別（超類）、抽象類、或者衍生類別（子類別）中的方法。 通常來說，程式設計師每修改一次程式就會進行最少一次單元測 試，在編寫程式的過程中前後很可能要進行多次單元測試，以證實程 式達到軟體規格書要求的工作目標，沒有程式錯誤；雖然單元測試不 是必須的，但也不壞，這牽涉到專案管理的政策決定。[2] 整合測試（Integration Testing）是對一個工作單元進行測試，而 這個測試對被測試的單元並沒有完全的控制，而是使用該單元一個或 多個真實依賴的相依物件，例如時間、網路、資料庫、執行序或亂數 產生器等，整合多方資源進行測試，確保模組與模組之間的互動行為 正確無誤，也讓不同模組在各自開發維護的過程中不會因為功能調整 - 9 - 而遭到破壞。這種類型的測試通常介於單元測試與端對端測試間，有 時候會由專職的測試人員進行開發，但大部分還是由開發團隊中負責 特定模組的人來撰寫。有時候單一模組即便完全通過單元測試，獨立 運作也正常，但是當需要與其他模組互動時，也是有可能發生錯誤， 這時就是整合測試的主要負責領域。[3] 整合測試通常是有測試小組 去做測試，針對不同物件彼此相關聯去撰寫規劃測試個案與預期結果， 當單一測試完成之後就會移轉給測試小組去做整合測試，此階段主要 去驗證各功能是否能在多種不同設定之下正常運行並輸出期望值或 行為。[4] 軟體開發者常會將系統開發者進行的驗收測試和客戶在接受產 品前進行的驗收測試分開。後者一般會稱為使用者驗收測試、終端客 戶測試、實機（驗收）測試、現場（驗收）測試。驗收測試（Acceptance Testing）通常已接近成品，因此在此階段大部份的問題應該都被修復， 接下來就是讓使用者與技術支援小組共同來操作運用以模擬實際客 戶狀況，此階段強調的是使用者需求或操作過程是否人性化。[12]
