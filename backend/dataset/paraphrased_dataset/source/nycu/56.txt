MVC 模式最早由Trygve Reenskaug 在1978 年提出(Trygve, R.,1978)，是全錄帕羅奧多研究中心（Xerox PARC）在20 世紀80 年 代為程式語言Smalltalk 發明的一種軟體架構。MVC 最重要的目的是 將程式進行模組化，將網頁之架構設計成如資料結構物件導向之概 念，使每一模組可達到重複利用的性質，此模式將程式結構更為直覺 與簡化，並提高架構管理上的方便性。軟體系統透過對自身基本部分 分離的同時也賦予了各個基本部分應有的功能 (維基百科，2019)，如 圖2-4 所示： 控制器（Controller）- 負責轉發請求，對請求進行處理。 視圖（View） - 介面設計人員進行圖形介面設計。 模型（Model） - 程式設計師編寫程式應有的功能（實現演算法 等等）、資料庫專家進行資料管理和資料庫設計(可以實現具體的功 能)。 圖2-4 MVC 模式 在最初動態網頁中，資料邏輯層與前端表示層(HTML)是混和在 一起，在經驗較豐富的開發者會利用連結或是引用的方式試圖將資料 邏輯層分離出來，此總方式的設計通常不是很容易做到全面性，而 MVC 可以從根本強制性的將邏輯層與表現層分離開來，雖然MVC 可能需要一些額外的工作，但是它帶給我們的好處是毋庸置疑的。 首先，多個 View 能共用一個 Model 。在MVC 設計模式中， Model 回應用戶端請求並返迴響應之資料，View 負責將格式化資料 呈現在表示層上，資料邏輯層和表示層被徹底分離，因此表示層通常 可以支援不同的前端框架，或是不同版面之設計，以達到支援不同的 計算機設備平台。同一個 Model 可以被不同的 View 重複利用，所 以大大提高了程式碼的可重用性，進而可達到API 服務的效果，可支 援跨系統之存取服務(維基百科，2019)。 其次，Controller 是自包含（self-contained,指高獨立內聚）的物件， 與 Model 和 View 保持相對的獨立，用於控制應用程式的流程，它 可以對包括用戶的行為和Model 的改變作出回應。例如，把資料庫從 Oracle 移植到 SQL Server，或者把RDBMS 資料來源改變成LDAP 資 料來源，只需改變 Model 即可。由於MVC 模式的三個模組相互獨 立，所以改變其中一個不會影響其他兩個，依據這種設計模式才能構 造良好的少互擾性的組件(維基百科，2019)。
