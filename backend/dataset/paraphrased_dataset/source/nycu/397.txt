食物在對輪廓進行比對時，可能因為目標圖案的輪廓是不規則形狀，而難以找到較為匹配 的結果，這時我們便可以使用能任意塑形的食物擺放該輪廓。實際上，大部分在製作食物擺盤 時，料理者會先使用可以任意塑形的食物當作基底，再用其他的食物進行點綴，其中，由於白 飯本身具有黏性能容易的塑型，是拿來塑型的最佳、也是最常見的食物；另外，像是日本媽媽 們製作的造型便當，便大量的運用到了海苔片，利用海苔片裁剪出角色的五官或是其他任何造 型，是很常見的一種手法。因此，考慮到實際的擺盤狀況，我們系統中食物的資料集納入了幾 種能夠任意塑形的食物，其中包含了白飯、海苔、起司、麵條、炒蛋、馬鈴薯泥、以及三種醬 料(白醬、紅醬、青醬)。 然而，若是單純的直接用輪廓的形狀對食物影像切割，呈現出來的結果會些許的不自然， 因此我們使用Graph Cut 演算法來實作影像的切割，Graph Cut 在計算機視覺領域中常用於前景 背景的切割(Image segmentation)，此演算法結合了最小切割(Minimum Cut)的概念，是一種十分 流行的能量優化演算法。首先，將整張食物影像視為一張無向圖G，影像上的每個像素都是一 個頂點v ∈ V，且每個像素與鄰近上下左右的像素皆有一條邊e ∈ E，每條邊上的權值是兩個像 素之間的灰度值(0～255)差異的倒數，此權值可以解析為兩像素間不連續的懲罰，若兩像素的灰 度值相近，則權值高，代表他們屬於同一個背景或前景的機率很大；若兩像素的灰度值差異大， 則邊上的權值接近於0，代表他們很大的機率分別處在背景與前景的邊緣附近，這個利用鄰近 像素灰度值差異來計算邊上的值為邊界項B(L)。 此外，Graph Cut 和一般無向圖不同的地方在於多了兩個終端頂點S、T，分別對應於影像 的前景與背景像素集合，無向圖G 的每個頂點v 都分別和S 與T 連接，組成第二種邊，v 與S 相連的邊的值為v 屬於前景的概率，v 與T 相連的邊的值則為v 屬於背景的概率，此用來分配 屬於前景或背景的邊的值為區域項R(L)。為了設置區域項的值，我們對目標輪廓的曲線分別進 行膨脹以及侵蝕(Kernel size = 15*15)，便可以得到外圈以及內圈的邊界，也就是要對食物影像 裁切的範圍，內圈邊界上的頂點v 與S 相連的邊的值為1、與T 相連的邊的值為0；而外圈邊界 上的頂點v 與S 相連的邊的值為0、與T 相連的邊的值為1。 假設整張影像的標籤為L =｛𝑙1, 𝑙2, 𝑙3,…𝑙𝑛｝，標籤為0（前景）或1（背景），在計算完 影像的區域項以及邊界項的值後，我們便能將影像的能量表示為：能量函數E(L) = a*R(L) + b*B(L)，a、b 分別為區域項及邊界項的權重值，而我們的最終目標就是要優化此能量函數，使 其值達到最小，這個過程可以通過最小切割演算法達到，找出一條最佳路徑最小化此能量函數， 最後，沿著邊界處將影像的前景與背景分割開來，便能得到所需要的依輪廓裁剪而成的食物影 像。
