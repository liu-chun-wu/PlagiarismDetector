根據上述的演算法流程，我們會去計算卡通圖案每一個輪廓與食物清單每一個食物比對後 的結果，並儲存為𝑅𝑆𝑓𝐼𝑑𝑥 𝑐𝐼𝑑𝑥，其中記錄了各個擺盤結果與目標輪廓的各項差異值𝐸𝑐𝑜𝑙𝑜𝑟、𝐸𝑖𝑐𝑝、𝐸𝑎𝑟𝑒𝑎。 接著，我們會先考慮食物是否可以疊放，再進一步決定整個擺盤結果的擺放方式，讓擺盤結果 能夠看起來最美味。由於兒童容易受到鮮豔的顏色所吸引，顏色越多變化、食物種類越多，他 們會願意消費更多食物，因此除了每個輪廓的擺放結果𝑅𝑆𝑓𝐼𝑑𝑥 𝑐𝐼𝑑𝑥的各項差異值，還要同時考量到 整個擺盤結果的食物種類數量。 為了找到能讓整體看起來最吸引人的擺盤結果，我們制訂了塞選機制，如Fig. 4 所示： (1) 先用𝐸𝑎𝑟𝑒𝑎、𝐸𝑖𝑐𝑝篩選不好的結果。[#若某一輪廓的所有結果皆被篩選掉，則選擇最好的結果] (2) 判斷目前每一輪廓結果中，是否有單一食物匹配的結果 (不是用多個食物擺放輪廓的結果)， 優先選用，並刪除掉其他用多個食物擺放輪廓的結果。 (3) 由於塞選完結果後要計算所有可能的擺盤結果，若是輪廓多且輪廓結果也多，計算所需要的 時間會很久，因此，設定每一個輪廓的擺盤結果最多4 個。 Fig. 4：制定一塞選機制，使的擺盤結果不只考慮個別輪廓的最佳解，也要滿足整體擺盤結果的顏色 與食物種類更多樣化 (4) 目前每一輪廓擁有最多4 個擺盤結果，為了找到最好的擺盤結果呈現，我們以深度優先搜尋 法，走訪每一種可能的擺盤結果組合，卡通圖案的輪廓總數量為𝑆𝑖𝑧𝑒𝑞，因此時間複雜度最多為 O(4𝑆𝑖𝑧𝑒𝑞)。在走訪的過程中同時計算整體擺盤結果的好壞，考量點分別為各項差異值以及食物 多樣性，公式如下： 𝑡𝑎𝑠𝑡𝑦= ( ∑∑𝑅𝑆𝑛 𝑚[𝑤𝑐∗(1 −𝐸𝑟𝑟𝑜𝑟𝑐𝑜𝑙𝑜𝑟) + 𝑤𝑖∗(1 −𝐸𝑟𝑟𝑜𝑟𝑖𝑐𝑝) + 𝑤𝑎∗(1 −𝐸𝑟𝑟𝑜𝑟𝑎𝑟𝑒𝑎)] 𝑛 𝑆𝑖𝑧𝑒𝑞 𝑚 ) ∗𝐶𝑜𝑢𝑛𝑡𝑓 𝐶𝑜𝑢𝑛𝑡𝑎𝑙𝑙 其中，𝐶𝑜𝑢𝑛𝑡𝑎𝑙𝑙為食物清單的總食物數量，𝐶𝑜𝑢𝑛𝑡𝑓則為此擺盤結果使用到的食物數量，因此， 此公式計算出來的tasty 值越大越好，代表其多樣性高，整體的擺盤結果看起來越豐富、越美味。 4. 系統操作 Fig. 5： 造型擺盤系統介面 Fig. 5為我們整個造型擺盤系統的介面，最左側放置的是可以選的食物，這裡分為食物清單、 以及食譜兩個頁面，在食物清單的這個分頁會顯示所有的食物，並依照水果類、五穀根莖類 、 蔬菜類、蛋豆魚肉類、油脂類來分群，可以看到有些食物旁邊會有下拉式選單，點開後就可以 看到這個食物的不同切法；而在食譜的這個分頁，我們則是提供了11 個食譜做為參考，如果在 擺盤時不知道要用哪些食物，就可以參考食譜裡的食物搭配，食譜裡面有的食物，在食物清單 裡面都會有。另外，我們還提供一些可塑形的食物，像是白飯、海苔、起士、麵、…等，可塑 形的食物是指，在擺盤時，這些食物能夠隨意的裁切放成不同形狀。右上角的盤子會呈現當前 正在製作的擺盤結果，下方的空白處則會記錄之前所有做出的擺盤結果，在操作過程中，隨時 可以任意點選之前做好的擺盤結果觀看，或是再進一步去改善擺盤結果。另外，系統還提供了 幾種常見的營養成分做為參考，最後，最下方的三個按鈕則是系統提供的三種自動比對方式。
