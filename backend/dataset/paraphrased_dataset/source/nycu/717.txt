Lochert et al. (2008) 提出一套整合資料並預測旅程時間的演算法。透過地圖 的大型地標(如: 眾人所知的景點、建築)為最高階級，其次為高速公路，最後則 是一般道路。而用路人在使用道路時，會優先將路程優先規劃至目的地附近的大 型地標，使得起點與終點中間形成一條虛擬的線，待車輛逼近地標時，則進一步 將道路規劃至下一層級的公路及街道。由於現階段的導航系統在規劃路徑的時間 地標大多為是硬編碼(hard-coded)，所以在規劃行程時並不較為動態，一旦車輛接 近目的地，便可透過更多的資訊進而規劃出當前更好的道路，以便更快的抵達目 的地。 Wan et al. (2016) 希望能夠自動獲取行動群眾感知及上傳的資訊並結合雲輔助 流量擁塞控制算法的邏輯流程圖來完成新的路徑規劃演算法。駕駛及乘客都能透 過任何智慧型設備獲取當前狀況，在獲取資料的當下，系統也會自動啟動以下的 演算法 (Algorithm 1) 。 Algorithm 1 Input: Time: The vehicle entry period; 𝑆𝑑: The destination station; Begin Set the weight parameter α, β and γ; Construct all values of 𝑑𝑖,𝑗 and 𝑞𝑖,𝑗 according to the distances among station; 𝑇𝑐←current time; 𝑇𝑙←𝑇𝑐; While condition are satisfied do If (𝑇𝑐−𝑇𝑙≥𝑇) then Construct all values of 𝑣𝑖,𝑗 and 𝑟𝑖,𝑗 which are obtained from cloud servers; Construct the weight W using Equations (7) and (8); Get the next station 𝑆𝑛𝑒𝑥𝑡; Obtain and report the shortest path from 𝑆𝑛𝑒𝑥𝑡 to 𝑆𝑑using Dijkstra’s algorithm; 𝑇𝑐←current time; 𝑇𝑙←𝑇𝑐; else 𝑇𝑐←current time; endif endwhile end 在Algorithm 1 中，假設道路等級分成四種等級，並依照等級區分給予不同數 字來給予權重的比例: 𝑞𝑖,𝑗= { 0, 𝑅(𝑆𝑖, 𝑆𝑗) 為第一階級道路 0.5, 𝑅(𝑆𝑖, 𝑆𝑗) 為第二階級道路 1, 𝑅(𝑆𝑖, 𝑆𝑗) 為第三階級道路 +∞, 𝑅(𝑆𝑖, 𝑆𝑗) 路徑無法使用 (1) 而在道路可能產生的壅塞事件，在Wan et al. (2016) 的假設中定義成兩種狀 態，如果發生壅塞，則給予無限大，表示此條路不可再使用；除此之後，則用 零，表示可以使用: 𝑟𝑖,𝑗= {+∞, 𝑅(𝑆𝑖, 𝑆𝑗) 路徑有異常狀況，無法使用 0, 其餘狀況 (2) 圖 2.3-1 基於車輛雲的交通預測 資料來源: Wan et la. (2016) Wan et al. (2016) 利用權重計算公式建立有向圖G = (V, E, φ)並找出最短路 徑，假設 V = ( 𝑆1, 𝑆1, … , 𝑆𝑁 )， E = { 𝑆𝑖, 𝑆𝑗 | 𝑆𝑖與𝑆𝑗存在一條有方向的路徑 }， 並且讓 𝜑 為一個公式。 𝐸→𝑅+ 公式如下: φ(𝑆𝑖, 𝑆𝑗) = 𝛼 √𝑣+ 𝛽∙𝑑𝑖,𝑗+ 𝛾∙𝑞𝑖,𝑗+ 𝑟𝑖,𝑗 (3) 若𝑣𝑖,𝑗的數值被檢測到0，則φ(𝑆𝑖, 𝑆𝑗)就會是無限大，也就代表此路徑無法使 用。然後透過陣列𝑊𝑁×𝑁來儲存對應的權重值: 𝑊𝑖,𝑗= φ(𝑆𝑖, 𝑆𝑗) (4) 接著Wan et al. (2016) 透過Dijkstra 演算法來規劃最短路徑，但最原始的 Dijkstrau 演算法並沒有使用最小優先佇列以及運作的時間長達O(|𝑉|2)，Fredman (1987)經由Fibonacci heaps 使用最小優先佇列對相同的演算法進行最佳化，使得 運行時間大幅降低至O(|𝐸| + |𝑉| ∙𝑙𝑜𝑔∙(|𝑉|))，這樣使得這套演算法能夠在交通車 流能夠被實現出來。
