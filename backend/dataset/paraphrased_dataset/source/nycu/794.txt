圖10  模擬器運作流程圖 要驗證我們所提出的方法是否有效，必須透過大量的實驗來驗證，因無法找到 足夠嘸蝦米輸入法的使用人口，故我們選擇使用模擬器來完成這項工作。根據 Shiri[3]於2012 年提出的研究，使用者在進行輸入時，其點擊位置原則上是符合 二維常態分布，因此，本論文將會以二維常態分布來模擬點擊。 輸入模擬器採用Perl 搭配ADB 使用，以Perl 讀取文章，將文字轉換為對應之 嘸蝦米字根，接著將字根轉換為預先定義好之座標，針對每一次的點擊，依輸入的 標準差，將點擊位置產生二維常態分布的雜訊，最後在用ADB 搭配sendevent 指 令，將點擊的座標送至Android 裝置。 由於每台Android 設備的螢幕大小不一定相同，在設計模擬器時，必須先了解 我們所使用的設備其解析度為何，才能夠將字根轉為正確的座標位置。Android 為 了降低開發程式時的複雜度，採用dip 做為裝置螢幕大小的計算單位，dip 的全名 為Density Independent Pixels，是一個虛擬的解析度，目的是為了讓我們更好量化 手機上的視覺大小。 表2  Android 常見解析度 密度類型 密度值 代表解析度 換算比例 ldpi 240x320 1dp = 0.75px mdpi 320x480 1dp = 1px hdpi 480x800 1dp = 1.5px xhdpi 720x1280 1dp = 2px xxhdpi 1080x1920 1dp = 3px xxxhdpi 1440x2560 1dp = 4px 為了讓模擬器能夠點擊到字根在手持裝置上相對應的位置，必需先取得每個 按鍵的中心點，在創建輸入法時，我們透過xml 去指定每個按鍵的位置及寬高，將 寬度定為螢幕寬度的10%，而高度定義為56dip，而我們選用的環境，其密度類型 為xxxhdpi[6]，對照上表可得知每個按鍵的寬為144 像素，高224 像素，便可推出 所有按鍵位置如下表。 表3  按鍵對應座標表 按鍵 座標 按鍵 座標 按鍵 座標 按鍵 座標 A 144,336 I 1080,112 Q 72,122 Y 792,112 B 864,560 J 1008,336 R 504,112 Z 288,560 C 576,560 K 1152,336 S 288,336 . 1152,778 D 432,336 L 1296,336 T 648,112 , 432,778 E 360,112 M 1152,560 U 936,112 <SPACE> 792,778 F 576,336 N 1008,560 V 720,560 G 720,336 O 1224,112 W 216,112 H 864,336 P 1368,112 X 432,560 當模擬器開始對裝置進行輸入，我們會依上表取得每個按鍵的中心位置，接著 以0 為平均值，以輸入之標準差分別取得寬高偏移值，由中心點進行偏移點擊，由 下圖可看出，在不同標準差下，同一個字根進行一千次點擊，落點之分布範圍；此 外，為了避免無效點擊，當計算結果超出鍵盤邊界時，會強制修正回最接近之按鍵 內。 圖11  不同標準差點擊一千次之結果
