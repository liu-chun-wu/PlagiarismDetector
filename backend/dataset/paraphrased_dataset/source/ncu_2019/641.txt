從頭開始設計一套DSL 來實現程式語言可能是相當困難。而且，我們很有可能在 開發初期會耗費較大的成本開發DSL。 假設若真的不想從頭開始構建新的程式語言。更好的方法是，讓使用既有的其他語 言的基礎架構，以特殊的方式將其定製到指定的特定領域，從而產生特定於該領域的嵌 入式語言（DSEL）。在此基礎上，我們可以專注於語義問題。可以在此級別使用該特定 領域的專有名詞當作抽象原則來構建，使得本身易於該領域專家理解，高度模組化易於 發展的程式語言工具。通過這種方法，可以創建豐富的基礎結構，以便於語法、語義及 軟體工具和各種其他相關工具的重複利用。有了這樣的基礎架構，能節省部分開發的成 本。 DSL 開發的初始成本可能高於傳統的軟體開發方案下的“工具化”應用程式。但是使 用DSL，總體軟體開發成本曲線的斜率應該大大降低，開發成本如圖1.3，因此在某種 程度上DSL 的方法應該可以節省大量成本。[3] 圖1.3  The Payoff of DSL Technology [3] DSL 的目標很明確，就是要協助軟體開發人員提高生產力，但是在決定是否使用 DSL 時，以下這些是必須考慮。解決該領域問題是否複雜到值得花費人力、時間來定義 一套新的DSL？設計一套DSL 需要知道所涉及的標準是什麼，理解質量的概念，並理 解評估過程本身，這通常是複雜的[4]。如果只是一般的小問題，其實就用不著大費周章 定義一套DSL，至於哪種問題算是大，哪種問題算是小，這恐怕還得看不同專案的情況， 以及靠經驗來判斷。 就算當語言實作完成後，下一個面臨的問題就是配套與使用者心理。即使語言再簡 單，都還是有自己的中心哲學，對於使用者來說：他們是不是能快速的學習、語言的學 習效率曲線是不是適當呢？甚至使用者可能排斥再學一個新語言？接著實際開發時，是 不是相關的工具都能搭配上，是不是能有好用的 editor、IDE 來輔助使用DSL 的開發、 吸引DSL 開發者目光[5]。而其中麻煩的為開發的便利性、錯誤資訊或除錯的環境。
