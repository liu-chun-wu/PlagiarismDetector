關於 EUC (End-user computing)的定義，Lieberman et al. (2006)提出: 一種方法、技術和工具，允許作為非專業系統開發人員的系統用戶，在某些 時候創建、修改或擴展系統。 並有一系列相似的名稱，如EUD (End-user development), EUP (End-user programming), EUSE (End-user software engineering), UDAs (User developed applications), OEUC (Organizational end-user computing), EUAD (End-user application development)等。Wikipedia 的 End-user development (2019a)提到，最 受歡迎的工具是試算表(spreadsheet)，由於其不受限制的性質，非 IT 人員可以使 用來創建復雜的數據模型，且由於它們在商業中的共同使用，試算表技能是員工 最有益的技能之一。 EUC 與試算表在運用上有許多文獻提到是非常重要的， Croll (2007)研究了 倫敦市(倫敦金融區)的試算表使用情況，他認為試算表起著至關重要的作用，如 果沒有它們，公司和市場將無法像目前那樣運作。 Panko & Port (2013)提到，試算表是極其廣泛的 IDE ，它們不只限於傳統的 決策支持應用程式，它們更用於操作系統、追踪系統以及許多其他大型和重要的 系統。並提到，人們普遍認為，試算表用於開發小型和簡單的模型，其中許多是 一次性計算，但是，試算表是廣泛的計算和數據工具，可用於開發極其龐大和復 雜的應用系統，尤其是現在除最極端的情況外， PC 處理能力和試算表限制已並 非是問題。 在EUC 與IT 比較的文獻上， Rosene (2012)提出最終用戶的 EUC 與 IT 在 系統開發上有一些明顯的差異，如以下六點: 1. 目標: EUC 致力於實現個人目標，而 IT 則由管理機構、部門或其他組織單位定 義的目標指導。 2. 提升系統品質的時間: 在系統開發方法上， IT 工程師分配單獨的時間來提升系統的品質，而 EUC 往往忽略這個階段。 3. 收集需求: IT 在系統開發時主要的工作之一是收集需求，而 EUC 往往沒有這個階段， 因為最終用戶是領域專家，他們創建的系統是滿足他們的需求。 4. 設計和規範: IT 在設計階段時，會確保系統運作方式能符合所有收集到的需求，而最終 用戶經常會遇到將需求轉換為系統的問題，這主要是因為他們缺乏技術和專 業知識。 5. 測試與驗證: IT 在測試與驗證時，會運用驗證過的測試技術與方式，而 EUC 則不太重 視系統開發生命週期。 6. 消除錯誤: 在測試與驗證階段後， IT 會從程式中刪除檢測到的錯誤，而最終用戶常在 此遇到問題，因為他們大多缺乏關於程序執行背景的正式知識，並且無法消 除錯誤。 EUC 與試算表在管理上也有許多文獻提到是很大的威脅，Croll (2007)在倫 敦市試算表的研究也提到，在試算表發揮關鍵作用的領域，如金融市場、基金管 理、投資研究和財務報告，其使用是相對不受控制，在這些行業中，重大錯誤的 真正風險尚不清楚，在某些情況下，風險是被強烈否定，在最糟糕的情況下，並 且在受訪者證據的支持下，高階管理層隱藏了試算表的存在或使用。 Panko & Port (2013)提到， EUC 中研究最多的方面之一就是研究試算表的 錯誤，試算表中的單個錯誤可能會產生不正確的結果，研究表明，在試算表的公 式儲存格中產生大約2％到5％的錯誤，這表明幾乎所有試算表都是不正確的。 IT 部門以外的人員開發了許多不正確的應用程式，而它們的規模和影響都很大， 但對企業中央與 IT 部門而言，主要來說是能見度低的，以致於難以管理。 而在 EUC 與 IT 的合作上的文獻， Karlsson & Hedström (2013)提到，現有 的研究很少研究 EUC 與系統開發的結合使用，因此，就現有文獻而言，很難將 EUC 評估為系統開發中的需求工程技術，但是可以得出結論， EUC 的應用系 統的質量已經在廣泛討論。 Siakas et al. (2017)提到，增加身為技術專家的 IT 部門和身為領域專家的最 終用戶之間的可控協作，雖然 EUC 既有利益也有風險，但通過開放性、信任、 靈活而正式的溝通渠道來解決，這些渠道可用於分享知識和經驗，以實現整體附 加價值來共同創造。
