一個可運作的系統是由各種不同的功能部件所組合而成的，小型的系統可以透過 個人對系統的理解獨自進行開發；但隨著系統規模增大與功能的擴充，系統的複雜性 也隨之成長，勢必需要投入更多的人力與時間資源來進行系統開發，為了進行人力的 分工，大型系統通常會拆分成幾個小的子功能模組交由各組人員開發，最後再進行系 統的整合；但若系統的複雜度過高時，會使得系統的整合難度提高，導致需要投入更 多的人力與時間成本來進行整合工作。為了解決這樣的問題，MIAT 設計方法論[13]提 出一套完整的方案，能夠清楚的將系統中各功能模組之間的關係表達出來，使得系統 的階層式與模組化設計更有效率，讓各個功能模組的團隊之間可以明確的溝通，縮減 系統開發時間，並提高系統的品質。 MIAT 設計方法論將系統透過IDEF(Integration Computer Aided Manufacturing(ICAM) Definition Languages, IDEF)中的IDEF0 建模方法[16]，以階層式 架構的方式切割成多個獨立的功能模組，切割後的功能模組再透過Grafcet[17]進行離 散事件系統模型的建模，藉此描述各個功能模組的行為，根據規則將模型轉換成對應 的程式碼，並且驗證各個功能模組的運行結果，最後再透過高階合成規則來完成複雜 的系統設計。MIAT 設計方法論架構如圖 3.1 所示。 階層式 模組化設計 離散事件 建模 軟體高階合成 硬體高階合成 系統需求 IDEF0 Grafcet 軟體 (C code) 硬體 (VHDL) 圖 3.1 MIAT 系統設計方法論結構圖
