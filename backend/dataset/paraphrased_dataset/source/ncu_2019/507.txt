在本研究中，使用了兩種方法進行 Web3 與 JavaScript 的串接，第一種是直 接透過Remix 提供的環境進行Web3 Provider 的連接，第二種則是使用 truffle framework 下的 truffle-contract 套件進行合約的調用。 圖36  deploy by web3 provider(Remix)畫面 資料來源：本研究整理 如圖36 所示，若使用的是 Remix 提供的 web3 provider 環境，可以直接連上 testrpc 在本機端(Localhost)設定好的位址(http://localhost:8545)，點選Deploy 後， 便可以將寫好的智能合約部屬在本機測試鏈上，這邊以 UploadInfoContract.sol 為 例，點選 Deploy 將合約部署至節點後，下方將會出現 UploadInfoContract at address（address 為合約地址）即表示完成部屬。 在JavaScript 中可透過web3.js 存取已部屬的合約，先建立web3 provider。 web3 = new Web3(newWeb3.providers.HttpProvider("http://localhost:8545") 設定預設帳號(區塊鏈地址)，這邊使用Testrpc 所提供十個帳號的第一個。 web3.eth.defaultAccount = web3.eth.accounts[0]; 做完以上步驟之後，JavaScript 需要透過合約的 ABI Code 來了解合約內容， 如擁有的方法、回傳的型態…等，我們可以透過Remix IDE 取得該合約之ABI， 如圖37 所示。 圖37  ABI code 畫面 資料來源：本研究整理 透過已部屬的合約地址，在前端程式碼需宣告一變數代表該合約，可藉由該 變數呼叫該合約方法。 另外，若使用的是truffle framework 下的truffle-contract 方法，在使用truffle compile 編譯並deploy 至testrpc 上後，在前端程式碼需加上以下程式碼進行智能 合約的調用。 與 Remix web3 provider 不同，truffle framework 可以直接編譯寫好的smart contract，不用透過 Remix IDE 線上進行編譯。因此，如下圖所示，直接透過 getJson 方法便可以獲取編譯好的智能合約。 編譯好的合約會以 json 檔的形式存放，在程式碼中加上上述程式碼就可以獲 得編譯後的合約 ABI code。此外，若是要調用合約中的函式，便需要加上下圖中 的程式碼。UploadInfoContract 為智能合約的名字，someFunction 則是在智能合約 中定義好的函數名稱，透過javascript 物件deployed，在此處對已佈署至節點的智 能合約中的函數進行呼叫。 本研究透過第一種方法對以Solidity 語言撰寫的智能合約進行快速除錯以及 測試，待確定沒有錯誤後，再將其透過 truffle framework 佈屬至 testrpc 所產生的 測試鏈之上。 四、 系統使用流程
