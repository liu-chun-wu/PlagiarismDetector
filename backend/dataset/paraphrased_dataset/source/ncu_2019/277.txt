(1)  程式語言需求 本方案首先是教育訓練的程式語言選擇，合適的程式語言能讓方案順利進行 甚至效果加倍，反之若行員無法學習或無法發揮運用的程式語言，則方案的效果 將會大打折扣，所以程式語言的選擇是至關重要的。本方案依Parker et al. (2006) 提出的五個步驟與標準來進行程序語言選擇，再依本方案的需求進行調整，步驟 分別為選擇標準條件、進行條件的評估與重要性、選取比較的程式語言、程式語 言比較與挑選；在23 個標準中，本方案依需求選擇15 個標準，並調整成6 點需 求條件，第一點是對應易於學習、新生的預期編程經驗水平的「易學性」，第二 點是對應合理的財務成本、學生/學術/完整版的系統要求、開發環境、支持目標 應用領域的「運用性」，第三點是對應教學方式支持的「交流性」，第四點是對應 腳本或全功能語言、支援Web 開發的「功能性」，第五點是對應編碼安全的「資 安性」，第六點是對應生命週期階段、學術接受、行業認可、市場性(區域性和國 家性)、後續編碼課程的高級功能的「銜接性」等，另外8 個標準如學生/學術版 本的可用性、教科書的可用性、操作系統依賴性、專有/開源、面向對象的支持、 偵錯設施、支援的可行性、合格的教師與員工等在本方案的需求相對較低，故以 此6 點為主，以下並就6 點在本方案的需求條件進行分析： 1. 易學性： 行員普遍非資訊相關科系，而以商科為主，學生時代許多是未接觸程式語言， 而出社會後就業也主要以金融業甚至是銀行業為主，也未接觸程式語言，普 遍來說行員是未接觸過程式語言的，完全的初學者要入門程式語言，易於學 習這個條件是至關重要的；而在考量本方案以問題導向教學方式為主，並且 考量實務面上，主要的現場教育訓練課程有時數限制，其他則是如教材的教 學式備註、論壇的教學與討論區、線上課程 E–Learning 等，需要短時間的 教學即能讓行員吸收概念，以及容易做出 EUC 成品來進行交流與學習，皆 強調易學性的重要。 2. 運用性： 學習程式語言並能發揮運用，對於行員才是真正有學習的意義，而本方案重 點之一是以行員在分行的 EUC 為主，銀行許多的資料有資安疑慮，是無法 從公司電腦移出的，所以行員程式語言的運用環境是以公司電腦為主，需考 量公司電腦安裝軟體與執行系統檔是受到管制，以及另行購置安裝軟體需預 算及各種層面等的評估與測試，外部網路上也有資安等的限制，所以易於運 用的條件是相當重要的，需在工作環境中能運用才能學以致用。 3. 交流性： 考量到本方案以交流為核心概念之一，在增進 EUC 、問題導向教學方式、 雛型法等議題皆需良好的交流，如行員間的 EUC 能互相交流來增進使用與 討論，與總行間的溝通傳遞更明確，也透過交流才方便教學與討論等原因， 若是 EUC 的成品是難以傳遞與交流的，則本方案的效果會大打折扣， EUC 還是維持現有能見度低的情況，所以易於交流的條件也是相對重要的。 4. 功能性： 若是程式語言能編寫的功能不夠業務上的使用，即便易學易用也是徒然；而 若是雖然能編寫出強大的系統功能與運用，但若是較難學習或較難運用也同 樣不適合，再考量到現階段行員的 EUC 普遍不需太強大的功能，而對於本 方案著重在 EUC 與雛型法的結合，行員程式語言的要求是做出雛型，所以 在程式語言的功能條件上是適中即可。 5. 資安： 銀行的資安是非常重要的，有鑑於 EUC 是難以完全控管的行員個別行為， 有較難管理的特性，所以選擇的程式語言功能不能強大到有資安風險與威 脅，而需以資安可以控管為主。 6. 銜接性： 許多程式語言學習者會將銜接等未來性的議題當做首選條件，因為程式語言 眾多，有些程式語言適合當入門語言建立基礎，日後對於銜接其他程式語言 很有幫助，而本方案考量以教育行員程式語言能力、運用與交流等為主，銜 接等未來性並非重要考量，若為了這點而影響到其他條件的效果則是得不償 失，而且程式語言並非是學習銜接性低的程式語言後即無法學習其他程式語 言，僅是幫助性大小的問題，所以銜接性並非重要條件。 以上六點是本方案的挑選程式語言重點條件，並整理成如表4-1 所示。 表4-1  程式語言需求條件 項目 重要性 內容 易學性 高 行員主要非資訊相關科系未接觸過程式，為初學者入門， 且需短時間的教學即能讓行員吸收概念，以及容易做出 EUC 成品來進行交流與學習。 運用性 高 學習程式語言並能發揮運用，才真正有學習的意義，以及 符合本方案的 EUC 運用需求，所以工作電腦環境需能配 合運用。 交流性 高 本方案在EUC、教學、雛型法上等皆需良好的交流，所以 方便溝通與交流也是重要的。 功能性 中 若不夠業務上的使用，即便易學易用也是徒然；若能編寫 強大的功能與運用，但若是難學習或難運用也同樣不適合， 再考量到現階段行員的 EUC 所需程度，功能是適中即可。 資安 高 銀行的資安是非常重要的，有鑑於 EUC 是難以完全控管 的行員個別行為，所以選擇的程式需以資安可以控管為主。 銜接性 低 許多學習者會將銜接等未來性的議題當做首選條件，惟考 量銜接性並非在本案很重要，若為了這點而影響到其他條 件的效果則是得不償失，而且並非銜接性低的程式語言日 後無法銜接，僅是幫助性大小的問題。 資料來源 : 本研究整理 (2)  選取比較的程式語言 程式語言種類眾多，本研究預先設定3 種程式語言進行條件比較挑選，在分 析比較過程中，若發現有更適合之程式語言則將更換比較，以及分析最終挑選的 程式語言條件是否適合程度較高。第一個程式語言是 C++ ， C++ 是臺灣許多 大學的資訊相關科系的入門程式語言，也是目前應用最廣泛的程式語言之一；第 二個程式語言是 Python ，挑選原因是較為廣泛使用的程式語言，在 YouTube 、 Google 、 Yahoo! 、 NASA 等都在內部大量使用 Python ，並因為對於各種網 路協定的支援很完善，因此經常被用於編寫伺服器軟體、網路爬蟲，以及使用於 機器學習的領域(維基百科，2019c)；第三個程式語言是 Visual Basic for Applications  ( VBA ) ，挑選原因是考量行員 EUC 以 Excel 為主，並且熟悉 Excel 的運用，而 Excel 的程式語言為 VBA 。 (3)  程式語言比較與挑選 C++ 的應用與功能皆非常廣泛與強大，所以是許多資訊相關人員的入門程 式語言，在功能與銜接等的條件上， C++ 皆是無庸置疑的相當強大，惟首先在 易學上， C++ 為主流程式設計語言中最複雜的一員，所以在易學上是不符合的； 而在運用、交流、資安上， C++ 需安裝編譯器，並以系統檔來執行程式，需大 幅更改現有電腦的配置與設定，資安上也較難防範 C++ 的強大，而本方案是以 未具資訊相關背景的行員入門為考量，所以 C++ 並非適合本方案的程式語言。 Python 也是當下熱門的程式語言，設計哲學強調程式碼的可讀性與簡潔的 語法，相較於 C++ 或 Java ， Python 讓開發者能夠用更少的代碼表達想法，而 不管是小型或是大型程式，該語言都試圖讓程式的結構清晰明瞭。 Python 在易 學上是較有優勢的，惟在運用、交流、資安上，同樣與 C++ 一樣需安裝編譯器、 系統檔執行，功能強大也使資安上同樣較難防範，所以 Python 對於本方案的合 適度也並非適合。 VBA 是 Visual Basic 的一種巨集語言，主要是用來擴展 Microsoft Office 軟體的應用程式功能，也可說是一種應用程式視覺化的 Basic Script (維基百科， 2019d)。在易學上， VBA 可以透過錄製巨集與結合 Excel 來編寫程式，雖然在 程式語言標準的編寫上，如此方式可能無法編寫出正式標準規格的編碼，但對於 初學者而言可以最快速學習到解決問題的方式，以問題導向教學方式來說是良好 的，而且行員熟悉 Excel 的運用，許多運用觀念可以互通，成品也是 Excel 檔 案，沒有切換界面需增加熟悉度的問題，而是在原來熟悉環境下的衍生，所以 VBA 對於行員在易學上佔有極大的優勢；在運用與交流上，因為是在熟悉的 Excel 上運用，所以現有工作環境即可支援行員運用 VBA ，並且直接以 Excel 檔案交流，方便想法與成品的傳遞，熟悉的界面更是增加傳遞交流的效果，所以 VBA 在運用及交流的條件上也是有優勢的；在功能上， VBA 並不若 C++ 或 Python 般強大， VBA 主要是擴展 Excel 的功能，具有處理文數字運算、資料 處理與圖表等的功能，雖然較難製作如網路連線等的正式系統，但仍可製作簡易 爬蟲軟體或摹仿系統運行，以初學者的要求來說， VBA 功能性上尚稱足夠，而 也因此 VBA 在資安上是控管度較高的，畢竟功能上相對沒那麼強大； VBA 的 好學讓它成為初選者的選擇之一，但它的銜接性不高也常是許多人不選擇的原因 之一，惟本方案以易學易用為主，畢竟若能讓行員學會 VBA 運用已是一大工程， 且絕大部分行員皆不會成為專業資訊工作人員，加上程式語言許多基本概念是相 同的，了解並能運用對於日後學習其他語言也有幫助，而 VBA 也能透過如結合 Excel 、 ACCESS 、 SQL 等的搭配使用來強化運用，所以 VBA 的銜接性低 是可以接受的。 綜合以上內容，並整理成如表4-2 所示， VBA 因錄製巨集與結合 Excel 運 用來編寫程式，以及行員熟悉、不用再另行改變工作電腦環境的 Excel 界面與檔 案，在本方案的易學性、運用性、交流性上不只勝過比較的 C++ 與 Python ， 也較其他程式語言適合，而功能性上目前是符合需求使用，資安上容易管制，銜 接性上是較低但非本方案重要條件且瑕不掩瑜，所以本方案挑選 VBA 為教學與 運用的程式語言。 表4-2  程式語言比較與挑選 項目 說明 C++ Python VBA 易學性 範例，如 「HELLO WORLD」。 #include <iostream.h> int main() { cout << “Hello World” << endl; } print("HELLO WORLD") MsgBox "Hello World" 範例，如「宣 告」。 int x = 3; x=3 x=3 特點 主流程式設計語言中 最複雜的一員。 設計哲學強調程式 碼的可讀性與簡潔 的語法。 1. 錄製巨集。 2. 可與Excel 結合運 用。 3. 行員熟悉的界面。 運用性 以不改變目前 環境為主。 安裝編譯器、系統檔 執行，需改變現有工 作電腦環境。 安裝編譯器、系統 檔執行，需改變現 有工作電腦環境。 Excel 檔案。 交流性 方便交流為 主。 需改變現有工作電腦 環境。 需改變現有工作電 腦環境。 Excel 檔案傳遞與運用， 現有環境即可。 功能性 適合的功能強 度。 應用與功能皆非常廣 泛與強大。 功能強大，如機器 學習、伺服器軟體、 網路爬蟲等。 主要是擴展 Excel 的功 能，具有處理文數字運算、 資料處理與圖表等的功 能，功能性在本方案與對 初學者而言尚稱足夠。 資安 以可以控管為 主。 功能強而難控管。 功能強而難控管。 好控管。 銜接性 非本方案要求 的條件。 高。 高。 低。 資料來源 : 本研究整理
