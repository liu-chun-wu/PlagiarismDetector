H.264 壓縮編碼資料於編碼時會利用Trailing bits 先將位元資料補齊後成為Raw Byte Sequence Payload（RBSP），接著再封裝到Network Abstract Layer Unit（NALU）中，後續 作為RTP 協定之Payload 封裝於RTP 封包中。 在分封交換網路下單一訊框的Maximum Transmission Unit（MTU）通常都有上限，故 大部分單一NALU 會被切割成多段分別置於RTP Payload 中傳送。於RFC3984 5.2 Common Structure of RTP Payload Format 中描述了H.264 NALU 作為RTP Payload 時可分為三大類 分別是Single NAL Unit Packet、Aggregation packet 以及Fragmentation Unit，每一大類皆可 再細分成多個小類，根據RFC3984 5.2 NAL Unit Octet Usage 可以看出NAL Unit Type 占 5bits 故最多可以有32 種可能，下圖 14 為NALU 結構之表頭共占1Bytes。 圖 14 NALU Header 資料來源：（Wenger et al., 2005） 實務上監控攝影機常見的輸出NALU 類型（Type）如下：  1 （Single NAL Unit Packet）: coded slice of non-IDR picture  5 （Single NAL Unit Packet）: coded slice of an IDR picture  6 （Single NAL Unit Packet）: supplemental enhancement information （SEI）  7 （Single NAL Unit Packet）:sequence parameter set （SPS）  8 （Single NAL Unit Packet）: picture parameter set （PPS）  9 （Single NAL Unit Packet）: access unit delimiter  28 （Fragmentation Unit）: FU-A 會使用Fragmentation Unit 代表一個NALU 超過RTP Payload 大小的上限，只有Single NAL unit 才可被切割，如果已是Aggregation packet 就不可再被切割。一個NAL unit 片段 包含整數個且連續的位元組。任一個NAL unit 位元組一定會落在恰好其中一個分割裡 面。同一個NAL unit 的分割必定要以連續的方式送出，伴隨遞增的RTP 表頭內之sequence number。重組時也靠sequence number 進行重組。如果是28（Fragmentation Unit）：FU-A NALU 類型，根據RFC 3984 5.8 Framgentation Unit（FUs）除了有FU indicator 欄位（與NALU Header 結構相同）還有FU Header 欄位。RTP payload format for FU-A 結構如下圖 15 所示。 圖 15 RTP Payload format for FU-A 資料來源：（Wenger et al., 2005） FU indicator 與FU header 皆各占1 Byte，連續地放置於 Framgentation Unit 之前。在此 情況下，NALU 未作Fragmentation 之前，其原始的Type 代碼則需要參考FU Header 欄位 內的Type 欄位。舉例來說一個NALU Type 為5（coded slice of an IDR picture）的IDR Frame 於傳輸時，正常情況下MTU 大小扣除Layer2、3、4 的Header 長度後所剩下的大小基本 上是無法在一個訊框內把一個Frame 資料傳輸完畢，必定要切割成多筆資料後分批傳輸， 這時就會將原本Single NAL Unit 資料以Fragmentation Unit 形式作包覆，再透過 Fragmentation Unit 內定義的FU header 欄位中的start bit 和end bit 各占1bit，FU header 結 構如下圖 16 所示。 圖 16 FU header 資料來源：（Wenger et al., 2005） 透過FU header 內的start bit 和end bit，可以來了解同一個Single NAL Unit 被切割放 置到Fragmentation Unit 結構內傳輸後第一個和最後一個片段式NAL 單元的開始與結束 封包。從下圖 17 範例可知道此封包乘載的H.264 NALU Payload 是原本Single NAL Unit 被片段切割傳輸後的最後一筆資料。因為在FU header 中的End bit 為1。 圖 17 Fragmentation Unit 資料來源：本研究 至於非頭和尾的片段式NAL 單元其start bit 和end bit 就都皆設為0，代表後面的傳 輸封包還有原本Single NAL Unit 被片段切割後的的資料尚未被接收完畢，如圖 18 所 示。 圖 18 Fragmentation Unit in middle 資料來源：本研究 圖 19 則是利用Wireshark 完整以封包結構的方式說明RTP 、 Fragmentation Unit 以 及H.264 NAL Unit Payload 之間的關係示意圖。 圖 19 RTP、Fragmentation Unit、H264 NAL Unit Payload 階層示意 資料來源：本研究 有一部分需注意的是因為其實這些Fragmentation Unit 其實都代表一個原始的Single NAL Unit，也就是frame，所以這些Fragmentation Unit 在傳輸時對應到RTP header 內的 Timestamp 欄位值都會相同。故實際將此frame 封存到MP4 中並產生stts box record 時只 會產生一筆資料。 stts box record 儲存方式為這次預計紀錄的sample 它所產生的delta time 時間為多少，透過下一個frame 所對應到傳送中RTP header 內的timestamp 欄位值與目前 欲紀錄的Frame 它所對應到的timestamp 數值的相差才是我們放入stts record 後sample delta 的結果。如要換算成該frame 實際停留於播放器上的秒數則還需要透過RTSP 中設 備端告知的SDP 資訊內的clock rate，以H.264 碼流來說一般攝影機的設定是90000，也 就是說frame 與frame 中RTP header 內的timestamp 如果相差90000，則代表前一張frame 在畫面上停留的時間為90000/90000 等於1 秒鐘。又實務上如果多個frame 間的時間差都 一樣的話，那其實就可以不用重覆紀錄多筆相同的stts record，而是將相同sample delta time 的NAL Unit 筆數紀錄下來合併放在一筆 stts record 中，以減少儲存時stts box 的使 用空間（如前2.4 節所述）。 攝影機串流的傳輸因對於即時性的要求較高，一般來說於傳輸層協定上會選擇使用 UDP 協定。因為H.264 編碼技術的要求於一組H.264 碼流於解碼前必須要有SPS （Sequence Parameter Set ）與PPS （Picture Parameter Set） 參數資料，前述資料可告訴 後續解碼器如何去解析壓縮編碼後之視訊碼流，因為於傳輸期間使用者可能中途調整畫 面解析度或者於傳輸期間因為封包掉包導致使用者端無接收到前述SPS、PPS 參數，故 實務上攝影機設備會於每個GOP （Group of Picture） 前面，也就是每個I-Frame 之前會 重覆地將不變或最新的SPS 與PPS 參數傳送至客戶端，惟發現並非所有廠牌攝影機在傳 送SPS 與PPS 時於RTP 內的封裝方式都相同，且於HTML5 瀏覽器內之原生播放器又發 生本研究欲處理之狀況。故本研究以個案公司監控系統所收容的攝影機串流封裝成MP4 後，針對moov box 結構內video trak box 下之sub box 中的stts、stsz、stsc、stco 與stss box 進行分析，透過收集不同廠牌IP 攝影機的串流影像檔，觀察MPEG-4 Meta Data moov 結 構內紀錄之表格，在視訊壓縮編碼技術以及H.264 Profile 和Level （Wikipedia(a), n.d.） 皆 不變的條件下，嘗試歸納出可使用HTML5 瀏覽器直接播放的錄影檔與不可直接播放之 錄影檔Meta Data 資料的特徵差異。找出疑似導致本問題之特徵，並以實驗方式嘗試在 不對已接收串流重新編碼的前提下，嘗試對有問題之Meta Data 進行調整，並驗證前一 步驟的調整是否可解決無法播放問題。最後歸納出前端設備產生有問題的Meta Data 原 因（3.4 小節）並歸納出修正流程圖（圖 20），詳細修正細節將於第四章做說明。 圖 20 Moov Box 修正流程圖 資料來源：本研究
