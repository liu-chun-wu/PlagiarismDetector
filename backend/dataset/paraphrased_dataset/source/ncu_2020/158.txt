TCP 屬於連接導向式通訊，是具有可靠性的資料傳輸協定。所謂的連接導向是指， 在各種設備、線路或網路中，進行通訊的兩個應用程式，為了傳送資料，而使用的專用 虛擬通訊路徑，又稱虛擬線路（Virtual Circuit）。建立連接後，進行通訊的應用程式，只 會使用這條虛擬線路傳送及接收資料，因而能確保資料傳輸。應用程式可以不用考量在 網路上所發生的各種麻煩現象，TCP 負責管理該連結的建立、結束及維持等工作。 TCP 用資料段（Segment）來代表一個訊息。如圖2-2 所示，為TCP 資料段的格式解 說。 當電腦送出一個資料段時，與輸入資料相關的是確認序號 （Acknowledgment Number） 和視窗 （Window）欄位，確認序號代表下一次預期要接收的資料之序號，而視窗則代 表還有多少暫存空間可以用來接收已確認資料的後續資料。確認永遠是指著尚未收到資 料的第一個位元組的位置，若有失序的資料段到達時，接收端的TCP 會產生相同的確認 直到尚未收到的資料到達為止。與輸出資料相關的是序號 （Sequence Number）欄位，此 欄位為在資料段中所攜帶資料的第一個位元組的序號。接收端則是利用此序號來重新排 列未按照順序送的資料段和計算出回送用的確認號碼。目的埠 （Destination Port）欄位 代表在接收端電腦應該讀取此資料的應用程式，來源埠 （Source Port）欄位代表在傳送 端送出此資料的應用程式。最後一個是校驗和 （Checksum）欄位，檢查範圍包括TCP 資 料段的表頭和資料。 圖 2-3 TCP 資料段的格式 資料來源：（Comer, 2019） 下圖2-4 為HTTP 的TCP 表頭範例。TCP 表頭包含：  Source Port: 57704  Destination Port: 80  Sequence Number: 0  Acknowledgement Number: 1136754238  Header Length: 32 bytes  Flags: 0x002  Checksum: 0x620e  Window: 64240  Urgent Pointer: 0  Options: 12 bytes 圖2-4 HTTP 的TCP 表頭範例 資料來源：本研究 為了進行可靠的通訊，TCP 必須考量到很多事，包括資料在傳輸過程中損毀、封包 遺失、重複、順序亂掉等問題。這些問題沒有解決，就無法提供可靠的通訊。TCP 是透 過檢查碼、封包序號、確認回應、重送控制、連接管理、視窗控制等各種手段，達到可 靠性通訊的目標。此外，TCP 還具備了流量控制及壅塞控制，有效提高了網路使用的效 率。 2.3.1 TCP 處理順序及封包遺失問題 TCP 使用定序（Sequencing）的方法來處理封包失序（Out of order）問題。傳送端在 每個封包上加一個順序的流水號碼，接收端則將有依照順序送來的封包往上一層傳遞， 若遇到失序封包則暫時存放在快取，等待正確順序的封包送達後再一起往上層傳遞。TCP 使用重傳 （Retransmission）機制來處理封包遺失的問題，當傳送端送出一個封包的同時 也會啟動一個計時器 （Timer）。若確認 （ACK）訊息在計時器逾時前抵達，傳送端會 取消此計時器。若計時器在確認訊息抵達前逾時，傳送端會把此封包再送一次並且再啟 動計時器。若網路狀況太糟糕導致超過重傳次數的最大值，TCP 會停止重傳並宣告傳輸 失敗。 2.3.2 流量控制 TCP 加入一個滑動視窗（Sliding Window）的概念，傳送端與接收端使用一個固定的 視窗大小，此視窗大小就是在確認封包回傳前傳送端可以傳送的最大資料量，假設視窗 大小為4 個封包，當傳送端要開始傳資料時，會先把這4 個封包填入緩衝區作為重送快 取，然後再依序將封包傳送出去，接收端收到封包一個個進來時，將封包傳給應用程式 並回傳確認封包給傳送者，此時傳送端便可以再傳送下一個封包。如圖2-3 為滑動視窗 的解說。 圖2-5 滑動視窗解說 資料來源：（劉超, 2020） 如果傳送端發送的封包，因接收端來不及處理而遲遲沒有收到確認訊號，導致緩衝 區中沒有空間了，且發送中的封包數量已超過視窗大小，則傳送端會停止封包發送並等 待確認訊號，若傳送端收到確認訊號的時間過長，視窗便會急遽縮小，來減少傳輸的流 量，避免緩衝區滿溢。 2.3.3 壅塞控制 TCP 的壅塞也是透過視窗的大小來控制的，上一節提到的滑動視窗，它用來防止發 送端緩衝區被塞滿，而壅塞視窗cwnd（Congestion window）則用來防止網路被塞滿。概 念上，TCP 會在壅塞發生時自動降低傳輸速率。因為TCP 使用動態大小的視窗，可以藉 由暫時性調小視窗大小來實現降低資料的傳輸速率。而TCP 在發送前不會知道當前網 路的壅塞程度，因此TCP 採用慢啟動（Slow Start）方式，來避免網路壅塞。 在開始傳輸時TCP 將cwnd 設為1，一次只能發送1 個封包，當發送端接收到這個 封包的確認後，cwnd 加1，於是下次能一次傳送2 個封包，當發送端又順利收到這2 個 封包的確認之後，cwnd 加2，於是下次能發送4 個封包，當收到這4 個封包的確認後， cwnd 加4，於是下次可以發送8 個。這種將一次傳輸封包數量指數級的遞增方式，將持 續到達慢啟動閥值ssthresh 為止。假設ssthresh=8，這時，收到8 封包的確認後，cwnd 只 會加1，於是下次能夠一次發送9 個封包，封包傳送的速率變成了線性增長 （劉超， 2020）。 壅塞的另一種表現形式是封包遺失，需要重傳，這時壅塞控制演算法會將cwnd/2， 然後設定ssthresh=cwnd 之後，封包的傳送速率會大幅降低並且呈線性增長。上述演算法 稱為AIMD（Additive Increase and Multiplicative Decrease）演算法。 TCP 的壅塞控制機制在即將發生壅塞的效果上反應良好，藉由迅速的將視窗大小倒 退減半，TCP 真的能緩和壅塞的情形。更重要的是，所有TCP 連線都使用這種標準演算 法時，代表所有傳送者皆會在網路壅塞時降低一半的傳輸量，因而能避免整個網路的壅 塞崩潰。
