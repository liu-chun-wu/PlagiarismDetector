本研究即想透過在不更動已收容之碼流的前提下，只針對metadata 資料，也就是moov box 內的video trak box 下的stts、stsz、stsc、stco、stss 五個box 內容來進行調整。因為沒 有牽扯到重新解碼再編碼H.264 的問題，因此處理速度快，調整完畢後再將改動過的 moov box 寫回原始MP4 原moov box 所在的檔案偏移位址。整個程序大致上是針對moov box 與mdat box 內容來做分析與處理，透過讀取moov box 中的metadata 來得知各sample 的讀取偏移位置以及查測各sample 中包含VCL-Unit 與Non-VCL-Unit 的狀況來決定後續 的修正方式。在2.1 節我們提到MP4 會以ISOIEC-14496-12 ISO Base Media File Format 標 準規範來進行封裝，而media data 則會被封裝在mdat box 結構中，表 6 為根據 ISOIEC-14496-12 ISO Base Media File Format 6.2.3 Box Order 小節中moov box 下可能的階 層結構。 表 6 moov box 階層結構示意 ftyp file type and compatibility mdat media data container moov container for all the metadata mvhd movie header, overall declarations trak container for an invidual track or stream mdia container for the media information in a track mdhd media header, overall information about the media minf media information container stbl sample table box, container for time/space map stsd sample descriptions（codec types） avc1 H.264 video decode parameter stts time-to-sample information table stss I-frame index table stco chunk offset information table stsc sample-to-chunk information table stsz sample size table 資料來源：（ISO/IEC/JTC 1/SC 29, 2005） 從表 6 中我們可以看到moov 存在目的是作為其他sub box 的容器，這些sub box 則 皆以巢狀的方式作為moov box 的內容存放在moov box 中。因為一開始我們需要先將檔 案讀取位置定位到moov box 的檔案偏移量上，所以我們需要了解box 在MP4 中的擺放 結構。根據ISOIEC-14496-12 ISO Base Media File Format 4.2 Object Structure 小節描述，在 MP4 檔案中每個box 中會有一個 header 紀載了此box 的大小與box 的名稱。Box 大小資 訊會以big-endian 形式占4 Bytes 出現在每個box 之前，緊接著是占4 Bytes 的box type， 這部分是以ascii code 形式來做紀錄，Box Header 結構如圖 7 所示。 圖 7 Box Header 資料來源：本研究 舉例來說如果一個大小占57880 Byte 的moov box header 的byte stream 由低位元到高 位元則會表示為 0x00 0x00 0xE2 0x18 0x6D 0x6F 0x6F 0x76，其中0x00 0x00 0xE2 0x18 是 big-endain形式的16進位整數表示，換算成10進位表示則是57880，而0x6D 0x6F 0x6F 0x76 部分，翻查ascii code table 可得知代表了 m o o v 這四個英文小寫字母的對應16 進位碼。 這邊需留意的是所謂的box size是有包含上述所提到的box header大小共8 Bytes的內容， 因各box 間都是緊密排列放置於檔案中，故我們可以透過box header 內提供的box size 與 box type 資訊快速地跳躍到我們感興趣的moov box 所在的檔案偏移位址上。從最上層整 個MP4 box 分析的角度來看，其檔案結構如圖 8 所示。 圖 8 MP4 檔案結構-Box 資料來源：本研究 前面我們說明了MP4 box 結構和MP4 檔案的關係以及moov box 作為metadata 的容器 box 的簡易說明，接著將針對另一重點box 也就是作為收容影音碼流容器的mdat box 做 說明。實務上因為攝影機傳送的聲音與影像資料是交錯地被傳送到接收端的，在 ISOIEC-14496-12 ISO Base Media File Format A.3 Physical structure of the media 小節中提到 對於chunk 的描述 “These sets of continuous samples for one track are called chunks.Each chunk has an offset into its containing file （from the beginning of the file）.”後我們可以得知 於mdat box 中資料會以Video chunk 和Audio chunk 交錯的方式擺放在mdat box 之中，各 chunk 在檔案中的偏移量會被存放在各moov box 下影像軌或聲音軌對應到的trak box 中 的stco box 內。雖然Audio Chunk 和Video Chunk 的資料是交錯擺放，但有時也會有多個 Audio Chunk 或Video Chunk 被連續擺放在mdat box 中，但stco box 中是以多筆方式來記 錄chunk offset 的情況發生。mdat box 的結構示意如圖 9 所示。 圖 9 mdat box 結構 資料來源：本研究 根據ISOIEC-14496-12 ISO Base Media File Format A.2 Core Concept 所述“the word sample to mean a timed frame or unit of data”在每個Video Chunk 內，Video sample 是被連續 地存放在其中，和本文的2.3 節呼應，每個Video sample 對應到的呈現時間會被存放在 stts box 內，而每個video sample 的sample size 資訊則會被放置在stsz box 中，最後每一個 Video Chunk 內到底包含了幾個Video Sample?其資訊則會被放在stsc box 中。從Video sample 的角度來看Video Chunk 的結構的話，其Video Chunk 的結構如圖 10 所示。 圖 10 Video Chunk 結構 資料來源：本研究 因為有了每個Video Chunk 在檔案中的偏移位址資訊（stco）再加上video sample 是 被依序放在Video chunk 內，透過stsz box 我們也知道了每個video sample 的大小，所以 每個video sample 在檔案中的偏移位址就可以被計算出來。舉例來說，一個MP4 video trak box 下的stsc box 呈現如下，等同描述了第1 個chunk 中有3 個samples，第2 個和第3 個chunk 中的sample 數都是5 個，而第4 個chunk 中的sample 數則是2 個的情況，表格 結構表示如表 7。 表 7 stsc box 呈現範例 No. First Chunk Samples per chunk 資料來源：本研究 因為第2、3 個chunk 收容的sample 個數相同，所以描述項被合併成一筆，後續因為 我們需要對chunk 內的sample 做合併處理，因為此精簡方式表達sample 數量與chunk 的 關係將不易於後續chunk 內sample 的數量變動，故本研究實作修正前會先將表 7 透過第
