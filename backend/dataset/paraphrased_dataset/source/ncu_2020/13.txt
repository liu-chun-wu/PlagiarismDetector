本研究發現會影響MP4 於HTML5 播放器無法播放的關鍵資料型態是 Non-VCL-NALU 單獨包覆於RTP Payload 中傳輸時因為並非畫面資訊，故於RTP time-stamp 欄位中所產生之timestamp 數值會與後一個接收到的VCL-NALU 對應到的RTP header 內的 timestamp 欄位值相同，因為stts box 內紀錄的是各sample 於畫面上呈現的時 間長短，時間單位轉換資訊則需參考mdhd box 內的timescale 欄位。在產生stts box record 時會將下一筆的single NAL unit對應到的RTP timestamp減掉本次欲紀錄之single NAL unit 所對應到的RTP timestamp 所產生的時間差即為寫入stts box record 對應到本次single NAL unit 的stts box record。以前述情況來說因為兩筆single NALU 對應到的RTP timestamp 都 一樣所以於stts box record 內會產生delta time 為零的 record。發生之原因是一般監控攝影 機於每個GOP 影像前都會重覆傳送SPS 與PPS 參數以避免接收端因攝影機參數調整如 解析畫素變更或H.264 壓縮演算法profile 的調整，導致播放端無法對串流進行解碼，又 SPS 與PPS NALU 單獨封裝於RTP Payload 中時，因為不是畫面資訊，所以RTP timestamp 會與下一個接收到的I-Frame 的timestamp 相同。進而導致在MP4 關檔時會產生stts box record 為0 的項目。 以一範例解釋，圖 21 為監控攝影機於rtsp 交談中透過Wireshark 截錄到的SDP資訊， 其中的a=rtpmap:98 H264/90000 屬性描述中即告知client 端後續的video stream 是會被包覆 在RTP Payload type number 是98 的RTP 封包中，而90000 的意思則為video stream 於RTP timestamp 欄位上的時間單位轉換為每經過一秒，於RTP timestamp 的數值會增加90000。 換句話說如果frame A 的RTP timestamp 是Ta，A 的緊鄰次一張frame B 的RTP timestamp 是Tb，則可推算frame A 的 delta time 實際為 （Tb-Ta） / 90000 秒，惟紀錄於stts box 中時會以 （Tb-Ta） 數值來記錄。 圖 21 RTSP 交握中SDP 資訊 資料來源：本研究 利用前述資訊，將側錄到的封包資料用Wireshark 程式開啟，點選在畫面上方工具列 中的edit/preferences 項目，下左方protocols 內選擇H.264 項目，於H.264 dynamic Payload types 欄位填入SDP 描述中針對攝影機串流中video 的部分對應到的RTP header 中Payload type number 以此例中可以看到video 的RTP Payload type number 是98，即可透過Wireshark 來解析RTP Payload 的H.264 資訊。 圖 22 Wireshark H.264 解析設定 資料來源：本研究 以此範例來說，從圖 23 裡可以看到SPS 與 PPS 與下一個I frame timestamp 都是 90000，如此後續將各sample 的delta time 資訊封裝到stts box 並產生stts box record 則會 產生sample delta 項目為0 的紀錄。 圖 23 sps and pps in same timestamp with next frame 資料來源：本研究 圖 24 表示在stts number list No.15 號的項目紀錄著有兩筆sample 其對應到的sample delta 皆為0。如何推論他是sps 與pps 呢？同樣地，我們從圖 24 中得知在stts number list No. 15 之前共有15 個sample，所以這兩個sample delta 為零sample 為此MP4 封裝檔內第 16 和17 號影像sample，此時我們需查詢同一個trak box 下stsc box 資訊，圖 25 紀錄了 chunk 與sample 數量mapping 的資訊。 圖 24 stts box 資料來源：本研究 在stsc box （圖 25） 中我們可以看到第1 個chunk 內包含了15 個sample，第2 個 和第3 個chunk 皆內包含了相同個數各18 個sample，因為第1 個chunk 內只收容了第1 到第15 號sample，所以我們關注的第16 和17 號影像sample 會落在第2 號chunk 內。惟 stsc box 如前所述，只紀載了chunk 與sample 數量mapping 的資訊，如需要知道該chunk 在檔案文件中的偏移量位址資訊則需要參考stco box 內提供的資訊。 圖 25 stsc box 資料來源：本研究 根據stco box 資訊 （圖 26） 我們找到第2 個chunk 位址在檔案偏移量79015（單位 是Byte）的地方，因此我們即可以從檔案偏移量79015 Byte 的位置找到我們關注的第16 和17 號影像sample，在chunk 內每一個sample 則是按照stsz box 內紀錄的各sample 大小 依序排列。 圖 26 stco box 資料來源：本研究 從圖 28 我們可以知道第16 和17 號影像sample 的大小分別占13 與8 Bytes。與stco box 內的chunk offset 資訊結合，最終我們得知第16 號影像sample 的檔案偏移量位於 79015+0 Byte 到79015+12 Byte 之間，而第17 號影像sample 的檔案偏移量則位於 79015+12+1 Byte 到79015+12+1+7 Byte 之間。我們接著觀察這兩個sample 所呈現的byte stream 內容分別為0x00 0x00 0x00 0x09 0x67 0x4D 0x00 0x1F 0xDA 0x01 0x40 0x16 0xE4 和 0x00 0x00 0x00 0x04 0x68 0xEE 0x3C 0x80。每個sample 的前4 個byte 是以Big-Endian 形 式表示此sample 的大小分別是0x00 0x00 0x00 0x09 以及0x00 0x00 0x00 0x04，第5 個則 是NALU header，分別是0x67 和0x68，二進位表示分別為01100111、01101000，根據 NALU 結構之表頭定義可以知道0x67 和0x68 對應到的type 分別為00111、01000 也就是 7（Single NAL Unit Packet）:sequence parameter set（SPS）、8（Single NAL Unit Packet）:picture parameter set（PPS）。 圖 27 NALU Header 資料來源：（Wenger et al., 2005） 圖 28 stsz box 資料來源：本研究 從上述過程我們即證明了於stts box 內sample delta 為0 的項目確實對應到的是SPS 與 PPS Non-VCL-NALU 類型之sample，而delta 為0 也的確源自於SPS 與 PPS 被封裝於 RTP 傳輸時於，header 內之timestamp 與緊鄰次一個被封裝於RTP 傳輸的I-Frame 對應 到的RTP header timestamp 相同。因stts box 是以frame 的 delta time 形式來紀錄各frame 於畫面上的停留時間，故前述之metadata 態樣封裝於MP4 中經實證於部分平台直接使用 瀏覽器原生HTML5 的 MP4 播放功能播放錄影檔時會發生播放中斷的情況。 第四章 實驗分析與討論 個案公司專案開發之影像監控平台採用第三方串流收容軟體，其程式邏輯非開發人 員所能控制，故為解決本文研究動機中所遭遇到的問題，需透過分析前端攝影機所傳送 到監控平台的串流形式與後續封裝MP4 錄影檔內moov box 中資料的關聯性來找出不可 播放的原因並最後透過實作將修正程序嵌入到監控平台的每一錄影檔關檔事件中來自 動化檢查並修復每一個歷史影像錄影檔。本章包含個案中MP4 原始資料的讀取方式邏 輯、修正情境分析以及修正程序。
