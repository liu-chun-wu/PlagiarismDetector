在Android 惡意程式較常見的分析方法中，大致能分為三類，靜態分析、動態分析 混合分析，而近幾年來硬體的運算能力進步，也使得許多研究借助機器學習複雜的演算 法來更準確地偵測惡意程式。 靜態分析的做法為透過反編譯工具將應用程式萃取出相關靜態原始碼，由於反編譯 過後的原始碼具可讀性，因此可供資安研究人員直接分析。靜態分析最大的特色為不需 要實際執行應用程式，僅須分析反編譯過後的相關原始碼來判斷是否為惡意程式。靜態 分析的優點在於萃取應用程式的特徵所需時間較短，且所需的硬體資源也較低，常見的 Android 惡意程式靜態特徵包括Opcode、API call 及Permission 等等。 [32]使用Android 權限為特徵，並使用機器學習分類器來偵測惡意程式，實驗結果的準確度達94%；[33] 使用Android 權限為特徵，並結合了Android 應用程式中的組件，包括中心伺服器、 Android 客戶端及特徵資料庫來偵測惡意程式，實驗結果顯示準確度達88%；[34]分析了 Android 應用程式中的Manifest.xml 檔案，並將其中的資訊與先前建立好的關鍵字清單 進行比對，實驗結果顯示準確度達到90%，且分析的成本非常低。 結合多特徵及深度學習擴增技術提升Android 小樣本惡意家族分類能力 動態分析的做法為實際執行應用程式，分析應用程式所觸發的行為，判斷是否為惡 意程式，而實際執行應用程式的方法包括在虛擬機、沙盒等等環境下執行。動態分析最 大的優點為對於程式碼混淆攻擊有較大的強健性，但由於惡意程式的某些行為可能需要 在特殊的情況下觸發，因此不一定每次執行動態分析都能捕捉到完整的行為，有機率造 成分析結果偏差的可能性，此外需要實際執行應用程式以觀察其所觸發行為的特性，也 使消耗的硬體資源較高、分析時間也會較長。[35]分析了Android 系統開機時會觸發的 一連串系統呼叫來偵測Android 惡意程式，實驗結果顯示準確度達到95.8%；[36]設計出 了動態偵測Android 惡意程式的架構，並使用密罐（Honeypot）來找出具有潛在危害的 惡意程式，實驗結果顯示準確度達96%；[37]修改了ADB（Android Debug Bridge）工 具，並新增了額外功能，像是能錄製API 呼叫的參數及回傳值以及能夠監控全部的程序 及執行緒，來對Android 惡意程式有更深的了解； [30]使用動態分析工具DroidBox 分 析Android 應用程式，捕捉執行中的行為，並結合馬可夫鏈（Markov chain）篩選出之後 輸入機器學習模型的特徵。 混合分析是一種結合靜態分析及動態分析的一種方式，雖然混合分析有著靜態分析 及動態分析都具有的優點，但考慮到惡意程式資料集的大小，缺點也顯而易見，那就是 分析應用程式的時間成本會大幅度地增加。Android 混合分析工具如AASandbox （Android Application Sandbox）[38]提供Android 應用程式二階段分析，執行過程為先 將Android 應用程式輸入至AASandbox，並以離線模式執行靜態分析及動態分析，靜態 分析首先對Android 惡意程式反編譯，並找出反編譯的檔案中可疑的特徵，而動態分析 結合多特徵及深度學習擴增技術提升Android 小樣本惡意家族分類能力 則是在模擬器環境中執行Android 應用程式並記錄執行過程中的系統呼叫。[39]開發出 一個能在訓練階段使用靜態分析及動態分析，但測試階段只使用靜態分析的工具，這樣 做的目的為在訓練階段時將動態分析的優點極大化，例如抗程式碼混淆的特性，但在測 試階段僅使用靜態分析，使時間成本極小化，而此方法實驗結果在整體準確度和時間複 雜度上比起純使用靜態分析及動態分析的效果更好；[40]結合靜態分析及動態分析，靜 態分析使用Bytecode 來辨識出應用程式是否有濫用資源及執行可疑行為，之後再使用 動態分析進一步檢測應用程式；[41]使用了API 呼叫、權限及系統呼叫作為特徵，並分 析這些特徵間的相依姓，之後使用機器學習來檢測Android 惡意程式。 除了靜態分析、動態分析及混合分析的技術之外，許多研究也常將這些分析出來的 特徵輸入至機器學習中進行訓練，提升惡意程式偵測效果。[42]以動態分析萃取出系統 函數，並結合機器學習來偵測Android 惡意程式，機器學習模型使用了決策樹及單純貝 氏分類器，實驗結果顯示準確度達90%；[43]使用了Android 中的系統呼叫為特徵，並 使用了類神經網路中的反向傳播法（Back Propagation）來偵測Android 惡意程式，實驗 結果顯示F1-score 達到98.27%；[44]使用靜態分析及動態分析從資料集中萃取出超過 200 種的特徵，並以深度學習技術來偵測Android 惡意程式，實驗結果顯示準確度達到 96.60%；[45]使用函數呼叫及系統呼叫為特徵，並以這些特徵訓練機器學習模型，並取 得不錯的準確度，作者在研究中提及此方法能夠偵測未見過的惡意程式；[46]從Android 應用程式的AndroidManifest.xml 檔案中萃取權限特徵，並使用單純貝式分類器（Naive 結合多特徵及深度學習擴增技術提升Android 小樣本惡意家族分類能力 Bayes）進行分類，實驗結果顯示結合Android 權限及機器學習技術，能更有效地偵測 Android 惡意程式。
