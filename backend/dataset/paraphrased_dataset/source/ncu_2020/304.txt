步驟與訓練SVD 雷同，使用surprise 套件所提供的非負矩陣分解模型進行 訓練，先進行交叉驗證的步驟，利用交叉驗證的方式，一樣能得知NMF 模型 在不同K 值等參數的表現，藉此判斷K 值多少時，NMF 模型在一樣的資料集 之下，平均RMSE 值為最低，後續即可以此K 值，對NMF 模型進行訓練和驗 證。 藉由交叉驗證完不同K 值得SVD 與NMF 模型，及取出SVD、NMF 兩模 型中表現較好的幾組數據，以RMSE 數值進行模型的比較，以選出最佳的模型 以利後續實驗的進行。 如圖 3.15 所示，為綜合第三章研究方法內所提之各步驟與其中所包含之小 節，形成此擇優推薦系統流程圖。 電腦遊戲評量之擇優推薦系統 圖 3.15 擇優推薦系統流程圖 電腦遊戲評量之擇優推薦系統 第4章、實驗結果 實驗使用的資料集為聖地牙哥加利福尼亞大學的朱利安·麥考利(Julian McAuley)教授主持的實驗室所釋出的Steam 遊戲平台資料集(Kang & McAuley, 2018; Pathak et al., 2017; Wan & McAuley, 2018) 。資料集內主要有 3 份資料，第一為使用者評論，儲存使用者對遊戲的評論，儲存內容和形式 如下圖 4.1 使用者原始評論資料範例 與表 4.1 所示: 圖 4.1 使用者原始評論資料範例 表 4.1 使用者原始評論資料之欄位意義 User_id User_url reviews Reviews- funny Reviews- posted 使用者ID 使用者頁面 url 評論 評論是否有趣 評論發布時間 Reviews- lasted_edited Reviews- item_id Reviews- helpful Reviews- recommend Reviews- review 評論最後修改 時間 評論的遊戲 ID 認為評論是否 有用之數量 正/反面評論 評論之文字內 容 電腦遊戲評量之擇優推薦系統 第二份資料集為使用者所擁有的遊戲資料，同樣以使用者ID 為主，儲存形 式如下圖 4.2 使用者原始遊戲資料範例與表 4.2 所示: 圖 4.2 使用者原始遊戲資料範例 表 4.2 使用者原始遊戲資料之各欄位意義 User_id Items_count Steam_id User_url items 使用者暱稱 使用者擁有 遊戲數量 使用者ID 使用者頁面url 使用者擁有 之遊戲 Items- item_id Items- item_name items – playtime_forever items - playtime_2weeks 遊戲ID 遊戲名稱 使用者遊玩總 時數 使用者2 周內遊 玩時數 第三份資料集則為商品組合的資料，儲存了各個steam 平台上所販售的商 品組合資訊，包含商品組合的ID，組合內所包含遊戲的ID 等等，儲存形式 如下圖 4.3 與表 4.3 遊戲組合原始資料之各欄位意義 所示: 電腦遊戲評量之擇優推薦系統 圖 4.3 遊戲組合原始資料範例 表 4.3 遊戲組合原始資料之各欄位意義 Bundle_final_ price Bundle_url Bundle_price Bundle_name Bundle_id 組合最終售 價 組合url 組合售價 組合名稱 組合ID Items Items-genre items–item_id items– discounted_price items– item_url 組合所含之 遊戲 遊戲種類 遊戲ID 遊戲折扣售價 遊戲url items– item_name 遊戲名稱 其中，以第一份使用者評論資料做為主要的資料來進行實驗，在完成資料 的前處理後，最終會得到一M×N 的使用者評論矩陣，其中M 為使用者數量， N 為遊戲數量，而因原始資料龐大，且後續組成使用者評分矩陣時更需耗費巨 大的空間，故在此僅以使用者ID 前5000 的使用者所進行的評論作為實驗使 電腦遊戲評量之擇優推薦系統 用。初步篩選結果如下所示: 圖 4.4 初步篩選之資料 同時對使用者所進行之評論數量進行統計，統計結果如下表 4.4 使用者評 論數量統計和圖 4.5 使用者評論數量長條圖所示: 表 4.4 使用者評論數量統計 User 評論數 使用者數量 10 以上 電腦遊戲評量之擇優推薦系統 圖 4.5 使用者評論數量長條圖 而經由前一資料彙整的步驟，篩選後的結果形成一個5000 × 1930的使用者 評分矩陣，再以矩陣進行雅卡爾相似度的計算。 進行完雅卡爾相似度的計算後，會產生5000 × 5000的使用者相似矩陣，處 理結果如下圖 4.6 使用者之雅卡爾相似度矩陣所示: 圖 4.6 使用者之雅卡爾相似度矩陣 同時因為雅卡爾相似度計算方式，容易產生相似度為0 的結果，在此以 user 編號分別為0 與1 的使用者相似度不為0 的列表，如下表 4.5 所示: 電腦遊戲評量之擇優推薦系統 表 4.5 使用者0 和使用者1 之相似使用者 userID 相似的userID 13, 14, 42, 81, 215, 218, 253, 352, 397, 467, 726, 727, 836, 885, 889, 945, 1092, 1096, 1263, 1269, 1296, 1308, 1317, 1441, 1456, 1584, 1620, 1640, 1822, 1942, 2052, 2084, 2190, 2196, 2358, 2408, 2497, 2598, 2611, 2645, 2680, 2813, 2834, 2867, 2970, 3035, 3097, 3245, 3394, 3443, 3464, 3484, 3659, 3661, 3758, 3938, 4074, 4089, 4097, 4176, 4279, 4306, 4352, 4449, 4464, 4469, 4567, 4578, 4772, 4785, 500, 609, 777, 1208, 1221, 1489, 1524, 1791, 2045, 2180, 2305, 2951, 3019, 3420, 3451, 3462, 3491, 3554, 3699, 3986, 4093, 4124, 4135, 4167, 4225, 4605, 4607, 4838 計算完使用者間的雅卡爾相似度後，即可進行以雅卡爾相似度進行的使用 者對遊戲的喜好預測，實驗結果如下圖 4.7: 圖 4.7 以使用者為基礎之評分預測 電腦遊戲評量之擇優推薦系統 為進行矩陣分解模型的訓練，一樣以先前處理完的使用者評論矩陣做為資 料輸入，而在正式將資料輸入並對模型進行訓練之前，需先對兩種矩陣分解模 型進行交叉驗證(cross validation)，以了解何種參數能獲得較好的訓練結果。 矩陣分解模型使用python 的Surprise 套件內的SVD 和NMF 模型進行訓 練以及比較，將先前處理之使用者評分資料，重新區分成訓練和測試資料集， 再藉由交叉驗證的方式，了解須將輸入的M × N分解成維度多少的較小矩陣。
