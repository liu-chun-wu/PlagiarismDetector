TF-IDF 為確定特定文章中單一字詞的的相對頻率，與該字詞在整個文件語料庫 中的成反比，該計算可確認單一字詞於該文件中的相關程度(Ramos, 2003)。 TF-IDF 計算原理如下(Wikipedia, 民107)： (1) TF(Term Frequency)詞彙頻率： 計算字詞於文件中出現之頻率次數，計算方程式請參考計算方程式式 1。其 計算方程式中𝑛𝑖,𝑗表示其字詞於文件中𝑑𝑗 (式 2)出現次數，∑𝑛𝑘,𝑗 𝑘 表示在文件中 𝑑𝑗(式 2)所有字詞總數。 TF𝑖,𝑗= 𝑛𝑖,𝑗 ∑𝑛𝑘,𝑗 𝑘 式 1 (2) IDF(Inverse Document Frequency)逆向文件頻率： 計算方程式請參考計算方程式式 2。其計算方程式中|𝐷|表示語料庫字詞總 數，|{𝑗: 𝑡𝑖∈𝑑𝑗}|表示該字詞於各篇文章出現次數，加1 是如果出現次數為0 時， 會導致計算上的錯誤所以加1。 透過大數據與資料視覺化建構學術期刊於資訊安全研究演進 IDF𝑖= log |𝐷| 1 + |{𝑗: 𝑡𝑖∈𝑑𝑗}| 式 2 (3) TF-IDF(Term Frequency - Inverse Document Frequency)： 將TF 和IDF 進行相乘後的結果，計算方程式請參考計算方程式式 3。 TFIDF𝑖,𝑗= TF𝑖,𝑗× IDF𝑖= 𝑛𝑖,𝑗 ∑𝑛𝑘,𝑗 𝑘 × log |D| 1 + |{𝑗: 𝑡𝑖∈𝑑𝑖}| 式 3 將關鍵字進行文章TF-IDF 之計算，可透過計算數值之結果，得知文章內容對於 關鍵字的討論程度，進而得知文章和關鍵字是否有關。 2.5 資料視覺化 資料視覺化就是將資料進行視覺化處理，將其資料能明確地更有效傳遞資訊為主 要目的。為了有效益的傳達想法，美學和功能需並駕其需前進，並將稀疏和複雜資料 集以更直觀的方式傳遞關鍵之見解(Friedman, 2008)。 Ben Fry(Fry, 2008)將是資料視覺化過程區分為七個步驟： (1) 獲取(Acquire)：從網路或硬碟獲取資料。 (2) 分析(Parse)：建構數據的涵義，產生資料類別。 (3) 過濾(Filter)：刪除不相關的數據資料。 (4) 發掘(Mine)：透過統計和資料探勘的方式整理資料。 (5) 呈現(Represent)：選擇視覺化模組呈現，例如：長條圖或樹狀圖。 (6) 調整(Refine)：調整模組呈現，使其更清晰更具吸引力。 (7) 互動(Interact)：增加更多資料呈現的數據篩選控制功能。 進行資料視覺化時，可透過資料數據的特徵，例如數據結構、時間特徵或空間特 透過大數據與資料視覺化建構學術期刊於資訊安全研究演進 徵等，選擇合適的可視覺化方法，可以直接地呈現數據之間的關係和規則(Yan, Wang, & Xia, 2017)。 GitHub 平台提供個人會組織建立公開的程式專案，並也提供社群功能，例如讚 (Star)、追蹤(Follow)和評論，用戶也可以透過複刻(Fork)他人專案的形式參與開發，目 前為世界上最大的程式碼存放網站和開源社群。我們於GitHub 平台上，搜尋常利用 JavaScript 套件設計圖形的程式語言，如ploytl.js、nvd3、Chart.js、D3 和recharts，製 作了GitHub 平台上數據比較，發現D3 於GitHub 平台上其討論度相當高。請參閱表 2。 表 2 ploytl.js、nvd3、Chart.js、D3、recharts 比較圖 程式語言 項目 讚 stars 複刻 forks 討論 commits 關注 watch 版本 releases D3.js 81,188 20,191 4,154 4,014 Chart.js 40,962 9,243 2,613 1,478 Recharts 10,537 1,282 Nvd3 6,769 2,203 3,044 Plotly.js 9,403 1,094 17,182 資料來源：本研究整理 D3.js(D3.js, 2018)又稱為Data-Driven Documents，是一個JavaScript 函式程式庫， 能透過CSV、JSON 或GeoJSON 的資料格式，將資料產生互動式之視覺化圖表，具 有非凡的靈活性而充分展現了HTML、SVG 和CSS 等WEB 標準之所有功能，並且 在Github 和Stack Overflow 網站平台上具有豐富的案例以及問題解決方式，因此本 研究將藉由D3.js 之強大視覺化功能呈現互動式視覺化圖表。 透過大數據與資料視覺化建構學術期刊於資訊安全研究演進 第三章 系統架構
