一般開發模式連線方式會直接撰寫於程式碼之中，且新增修改刪除都需要撰寫完善的 SQL 語法來對資料庫進行各式各樣的操作與維護。以下將本研究結果與一般連線方 式進行差異化對比與整理討論： 一、使用原生的連線方式並呼叫執行： 撰寫結果如圖20，此方式撰寫模式最為簡單，可是這樣的撰寫模式中帶有幾個 項缺點，1.相關資料訊庫訊息直接撰寫於程式碼之中，若出現錯誤將會把相關訊 our method DB class file control parameter control 息直接呈現在瀏覽器、2.針對SQL 使用的各項變數未經行消毒過濾，可以導致 常見的SQL 注入性功能導致系統資訊異常、3.此範例為連線MSSQL 的範例，若 要切換到其他資料庫系統，將需要修改所有依照此方式各程式才能使系統正常運 作。 圖 20 原生資料庫連線方式 資料來源：本研究整理 二、採取PDO 資料庫連線模式 撰寫結果如圖21，此連線模式帶有參數的過濾效果，可以有效降低SQL 注入風 險，且在資料庫的轉換上，可以修改連線語法，及可在各個資料庫進間行切換， 無須重現修改所有以開發的程式檔案，可是這樣的寫法依然存在將資料庫訊息直 接撰寫於程式碼之中。 圖 21 PDO 資料庫連線方式 資料來源：本研究整理 三、本研究資料庫連線模式 撰寫結果如圖22，此方式是採用了PDO 連線模組並將其物件模組化，並且加入相關 的錯誤訊息控制，此訊息不會出現瀏覽器中，讓使用者看到訊息，再加入連線訊息的 組態化，相關的訊息將透過讀取組態設定檔內容取得，不再直接撰寫於程式碼之中， 分別如前章節所敘述將其資料庫操作的各項基本訴求獨立開發為該物件的方法，使其 工程師在使用時所需要撰寫的結果簡易化如圖23，完整模組程式運作模式與程式碼 如附錄一至附錄四。 圖 22 本研究資料庫連線方式 資料來源：本研究整理 圖 23 本研究使用方法 資料來源：本研究整理
